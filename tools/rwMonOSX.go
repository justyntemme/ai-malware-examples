package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"golang.org/x/sys/syscall"
)

// GloballyWritableFiles is a function that finds which files on a system have globally writable permissions.
// It takes in the root directory to search, and returns a slice of file paths that are globally writable.
func GloballyWritableFiles(root string) ([]string, error) {
	// Create a slice to store the globally writable file paths
	globallyWritableFiles := []string{}

	// Walk the directory tree starting at the root
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Check if the current file has globally writable permissions
		if info.Mode()&os.ModePerm&0002 == 0 {
			// Add the file path to the globally writable files slice
			globallyWritableFiles = append(globallyWritableFiles, path)
		}

		return nil
	})

	// Return the slice of globally writable file paths and any error that occurred
	return globallyWritableFiles, err
}

// MonitorAdminProcesses is a function that monitors all admin processes for file access, and logs files that are globally writable.
func MonitorAdminProcesses() {
	// Find which files on the system have globally writable permissions
	globallyWritableFiles, err := GloballyWritableFiles("/")
	if err != nil {
		log.Fatal(err)
	}

	// Monitor the system for admin level processes that access globally writable files
	for {
		// Get a list of all processes on the system
		processes, err := syscall.Pids()
		if err != nil {
			log.Fatal(err)
		}

		// Check each process to see if it is an admin process
		for _, process := range processes {
			// Get the process credentials
			creds, err := syscall.Getpid(process)
			if err != nil {
				log.Fatal(err)
			}

			// Check if the process is running as an admin
			if creds.Uid == 0 {
				// Open the process's file descriptor table
				fds, err := syscall.Popenfiles(process)
				if err != nil {
					log.Fatal(err)
				}

				// Check each file descriptor in the table
				for _, fd := range fds {
					// Get the file path associated with the file descriptor
					path, err := syscall.FdToPath(fd)
					if err != nil {
						continue
					}
					// Check if the file path is globally writable
					if pathIsGloballyWritable(path, globallyWritableFiles) {
						fmt.Print(path)
					}

				}
			}

		}
	}
}

func main() {
	MonitorAdminProcesses()
}

// pathIsGloballyWritable is a helper function that checks if a given file path is globally writable.
// It takes in the file path to check and the slice of globally writable file paths, and returns a boolean indicating whether the file is globally writable.
func pathIsGloballyWritable(path string, globallyWritableFiles []string) bool {
	// Compare the given file path to each globally writable file path
	for _, globallyWritableFile := range globallyWritableFiles {
		if path == globallyWritableFile {
			return true
		}
	}
	return false
}
